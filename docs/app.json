[{"name": "app.py", "content": "from shiny import App, ui, render\nimport pandas as pd\nimport json\n#Importando o excel\ntry:\n    df_anual = pd.read_excel(\"T01VEGAN_KEYWORDS_TBL_yyyy.xlsx\")\n    df_anual['created_at'] = pd.to_datetime(df_anual['created_at'], format=\"%Y\")\nexcept FileNotFoundError:\n    print(\"ERRO: Arquivo 'T01VEGAN_KEYWORDS_TBL_yyyy.xlsx' n\u00e3o encontrado.\")\n    df_anual = None\nexcept Exception as e:\n    print(f\"Ocorreu um erro ao ler o arquivo Excel: {e}\")\n    df_anual = None\n\ntry:\n    df_mensal_original = pd.read_excel(\"T01VEGAN_KEYWORDS_TBL_mm.xlsx\")\n    df_mensal_original['created_at'] = pd.to_datetime(df_mensal_original['created_at'])\nexcept FileNotFoundError:\n    print(\"ERRO: Arquivo 'T01VEGAN_KEYWORDS_TBL_mm.xlsx' n\u00e3o encontrado.\")\n    df_mensal_original = None\nexcept Exception as e:\n    print(f\"Ocorreu um erro ao ler o arquivo Excel: {e}\")\n    df_mensal_original = None\n\n# --- Simula\u00e7\u00e3o de dados empilhados ---\ndf_anual_stacked = pd.DataFrame()\nif df_anual is not None:\n    df_anual_stacked['created_at'] = df_anual['created_at']\n    df_anual_stacked['Posted'] = (df_anual['vegan'] * 0.40).astype(int)\n    df_anual_stacked['Retweeted'] = (df_anual['vegan'] * 0.35).astype(int)\n    df_anual_stacked['Replied'] = (df_anual['vegan'] * 0.25).astype(int)\n\ndf_mensal_stacked = pd.DataFrame()\nif df_mensal_original is not None:\n    df_mensal_stacked['created_at'] = df_mensal_original['created_at']\n    df_mensal_stacked['Posted'] = (df_mensal_original['vegan'] * 0.40).astype(int)\n    df_mensal_stacked['Retweeted'] = (df_mensal_original['vegan'] * 0.35).astype(int)\n    df_mensal_stacked['Replied'] = (df_mensal_original['vegan'] * 0.25).astype(int)\n\nmetrics = ['Posted', 'Retweeted', 'Replied']\ncolors = ['#2f2f2f', '#696969', '#b2b2b2']\n\n# --- UI corrigida ---\napp_ui = ui.page_sidebar(\n    ui.sidebar(\n        ui.input_radio_buttons(\n            \"periodicidade\",\n            \"Selecione a periodicidade:\",\n            {\"Anual\": \"Anual\", \"Mensal\": \"Mensal\"},\n            selected=\"Anual\"\n        ),\n        title=\"Controles\",\n        bg=\"#f8f8f8\"\n    ),\n    ui.card(\n        ui.output_ui(\"grafico_html\"),\n        ui.output_ui(\"grafico_script\"),\n        style=\"min-height: 500px;\"\n    ),\n    ui.tags.head(\n        ui.tags.script(src=\"https://code.highcharts.com/highcharts.js\")\n    ),\n    title=\"M\u00e9tricas em tweets\"\n)\n\n# --- Server ---\ndef server(input, output, session):\n    @render.ui\n    def grafico_html():\n        return ui.HTML('<div id=\"container\" style=\"height: 400px; width: 100%;\"></div>')\n\n    @render.ui\n    def grafico_script():\n        periodicidade = input.periodicidade()\n\n        if periodicidade == \"Anual\":\n            df = df_anual_stacked\n            if df.empty:\n                return ui.tags.script(\"console.log('Dados anuais n\u00e3o dispon\u00edveis');\")\n            x_vals = df[\"created_at\"].dt.year.astype(str).tolist()\n            subtitle_text = \"2012 a 2022\"\n        else:\n            df = df_mensal_stacked\n            if df.empty:\n                return ui.tags.script(\"console.log('Dados mensais n\u00e3o dispon\u00edveis');\")\n            x_vals = df[\"created_at\"].dt.strftime(\"%Y-%m\").tolist()\n            subtitle_text = \"Dados Mensais\"\n\n        series_data = []\n        for i, metric in enumerate(metrics):\n            series_data.append({\n                \"name\": metric,\n                \"data\": df[metric].tolist() if metric in df.columns else [],\n                \"color\": colors[i]\n            })\n\n        cfg = {\n            \"chart\": {\"type\": \"area\"},\n            \"title\": {\"text\": None},\n            \"subtitle\": {\"text\": subtitle_text, \"align\": \"left\"},\n            \"xAxis\": {\"categories\": x_vals, \"tickmarkPlacement\": \"on\", \"title\": {\"enabled\": False}},\n            \"yAxis\": {\n                \"title\": {\"text\": None},\n                \"labels\": {\n                    \"format\": \"{value:,.0f}K\"\n                }\n            },\n            \"tooltip\": {\n                \"shared\": True,\n                \"pointFormat\": '<span style=\"color:{series.color}\">\u25cf</span> {series.name}: <b>{point.y:,.0f}</b><br/>'\n            },\n            \"plotOptions\": {\n                \"area\": {\n                    \"stacking\": 'normal',\n                    \"lineColor\": '#666666',\n                    \"lineWidth\": 1,\n                    \"marker\": {\n                        \"lineWidth\": 1,\n                        \"lineColor\": '#666666',\n                        \"symbol\": \"circle\"\n                    }\n                }\n            },\n            \"legend\": {\n                \"layout\": 'vertical',\n                \"align\": 'left',\n                \"verticalAlign\": 'top',\n                \"x\": 80,\n                \"y\": 40,\n                \"floating\": True,\n                \"borderWidth\": 1,\n                \"backgroundColor\": '#FFFFFF',\n                \"title\": {\"text\": \"M\u00e9tricas\"}\n            },\n            \"series\": series_data,\n            \"credits\": {\"text\": \"Fonte: API do X/Twitter\", \"href\": \"\"}\n        }\n\n        cfg_json = json.dumps(cfg)\n\n        return ui.tags.script(\n            f\"\"\"\n            (function render() {{\n                var go = (typeof Highcharts !== 'undefined') && document.getElementById('container');\n                if (!go) {{ setTimeout(render, 50); return; }}\n                Highcharts.chart('container', {cfg_json});\n            }})();\n            \"\"\"\n        )\n\napp = App(app_ui, server)\n", "type": "text"}, {"name": "README.md", "content": "# metricas", "type": "text"}, {"name": "T01VEGAN_NTWEETS_TBL_mm.xlsx", "content": "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", "type": "binary"}, {"name": "T01VEGAN_NTWEETS_TBL_yyyy.xlsx", "content": "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", "type": "binary"}]